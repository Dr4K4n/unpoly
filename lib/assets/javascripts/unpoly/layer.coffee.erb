class up.Layer

  @stack: new up.LayerStack(-> layers: [new up.layers.Root()])

  @config: new up.Config ->
    history: false
    location: null
    title: null
    origin: null
    position: null
    align: null
    size: null
    class: null
    targets: []
    openAnimation: 'fade-in'
    closeAnimation: 'fade-out'
    openDuration: null
    closeDuration: null
    openEasing: null
    closeEasing: null
    backdropOpenAnimation: 'fade-in'
    backdropCloseAnimation: 'fade-out'
    dismissLabel: 'Ã—'
    dismissAriaLabel: 'Dismiss dialog'
    dismissible: true
    onCreated: null
    onAccepted: null
    onDismissed: null
    onContentAttached: null

    flavor: 'modal' # default layer flavor to pick
    targets: ['[up-layer-target]']

  @flavors: {}

  @getImplementation: (options = {}) ->
    flavor = options.flavor ? config.flavor
    @flavors[flavor] or up.fail("Unknown layer flavor: #{flavor}")

  @build: (options) ->
    flavor = options.flavor ? config.flavor

  @registerFlavor: (Implementation) ->
    flavor = Implementation.flavor
    # Since the layer class names are not public API, we make their static
    # config property accessible through up.layer.config. E.g. up.layer.config.dialog
    # is set to up.layer.Dialog.config.

    Implementation.isDefault = up.framework.isBooting()

    @flavors[flavor] = Implementation

    if attr = Implementation.attr
      up.link.targetMacro attr,
        'up-layer': 'new'
        'up-flavor': flavor

  @reset: ->
    @config.reset()
    for flavor, implementation in u.copy(@flavors)
      implementation.config.reset()
      delete @flavors[flavor] unless implementation.isDefault


class up.Layer.Modal extends up.Layer


up.Layer.registerFlavor(up.layer.Modal)


#####################################################################


up.layer = do ->

  DEFAULT_FLAVOR_IMPLEMENTATIONS = [
    up.Layer.Root
    up.Layer.Modal
    up.Layer.Popup
    up.Layer.Drawer
    up.Layer.Cover
  ]

  config = new up.Config ->
    newConfig =
      flavor: 'modal'
      targets: ['[up-layer-target]']
      all: up.layer.Base.config

    for implementation in DEFAULT_FLAVOR_IMPLEMENTATIONS
      registerFlavor(implementation, newConfig)

    return newConfig

  stack = new up.LayerStack(-> layers: [new up.layers.Root()])

  registerFlavor = (Implementation, store = config) ->
    name = Implementation.flavor
    # Since the layer class names are not public API, we make their static
    # config property accessible through up.layer.config. E.g. up.layer.config.dialog
    # is set to up.layer.Dialog.config.
    subConfig = Implementation.config
    subConfig.Implementation = Implementation
    store[name] = subConfig

  defaultTargets = (options = {}) ->
    flavorImplementation(options).defaults().targets

  flavorImplementation = (options = {}) ->
    flavor = options.flavor ? config.flavor
    config[flavor].Implementation or up.fail("Unknown layer flavor: #{flavor}")

  closeHandlerAttr = (link, attr) ->
    if code = link.getAttribute(attr)
      return new Function('value', code).bind(link)

  reset = ->
    config.reset(deep: true)
    stack.reset()

  open = (options) ->
    options = u.options(options, layer: 'new')

    # Even if we are given { content} we need to pipe this through up.change()
    # since a lot of options processing is happening there.
    up.change(options)

  build = (options) ->
    flavor = options.flavor ? config.flavor
    Implementation = config[flavor].implementation
    return new Implementation(stack, options)

  prompt = (options) ->
    return new Promise (onAccept, onDismiss) ->
      options = u.merge(options, { onAccept, onDismiss })
      open(options)

  currentLayer = ->
    stack.current()

  allElements = (selector, options) ->
    layers = @stack.lookupAll(options)
    u.flatMap layers, (layer) -> layer.allElements(selector)

  firstElement = (selector, options) ->
    layers = @stack.lookupAll(options)
    u.findResult layers, -> layer.firstElement(selector)

  up.event.onEscape (event) ->
    if currentLayer().dismissable
      u.muteRejection dismiss()
      up.event.halt(event)

  # TODO: Docs for [up-modal]
  # TODO: Docs for [up-popup]
  # TODO: Docs for [up-drawer]
  # TODO: Docs for [up-cover]
  for implementation in DEFAULT_FLAVOR_IMPLEMENTATIONS
    if attr = implementation.attr
      up.link.targetMacro attr,
        'up-layer': 'new'
        'up-flavor': implementation.flavor

  # The framework is reset between tests, so also close a currently open tooltip.
  up.on 'up:framework:reset', reset

  root: -> stack.root()
  current: currentLayer
  forElement: (args...) -> stack.forElement(args...)
  all: -> stack.all()
  parent: -> stack.parent()
  ancestors: -> stack.ancestors()
  selfAndAncestors: -> stack.selfAndAncestors()
  lookup: lookupOne
  lookupAll: lookupAll
  allElements: allElements
  firstElement: firstElement
  config: config
  defaultTargets: defaultTargets
  open: open
  container: -> stack.container()
  build: build
