###**
Events
======

Most Unpoly interactions emit DOM events that are prefixed with `up:`.

    $(document).on('up:modal:opened', function(event) {
      console.log('A new modal has just opened!');
    });

Events often have both present ([`up:modal:open`](/up:modal:open))
and past forms ([`up:modal:opened`](/up:modal:opened)).


\#\#\# Preventing events

You can prevent most present form events by calling `preventDefault()`:

    $(document).on('up:modal:open', function(event) {
      if (event.url == '/evil') {
        // Prevent the modal from opening
        event.preventDefault();
      }
    });


\#\#\# A better way to bind event listeners

Instead of using jQuery to bind  an event handler to `document`, you can also
use the more convenient [`up.on()`](/up.on):

    up.on('click', 'button', function(event, $button) {
      // $button is a jQuery collection containing
      // the clicked <button> element
    });

This improves jQuery's [`on`](http://api.jquery.com/on/) in multiple ways:

- Event listeners on [unsupported browsers](/up.browser.isSupported) are silently discarded,
  leaving you with an application without JavaScript. This is typically preferable to
  a soup of randomly broken JavaScript in ancient browsers.
- A jQuery object with the target element is automatically passed to the event handler
  as a second argument. You no longer need to write `$(this)` in the handler function.
- You use an [`up-data`](/up-data) attribute to [attach structured data](/up.on#attaching-structured-data)
  to observed elements.

@class up.bus
###
up.bus = (($) ->
  
  u = up.util

  # We remember which argument lists have been passed to `up.on()`
  # so we can clean out the listener registry between tests.
  liveUpDescriptions = {}
  nextUpDescriptionNumber = 0

  # A hash mapping oldEventName => newEventName
  renamedEvents = {}

  ###**
  Convert an Unpoly style listener (second argument is the event target
  as a jQuery collection) to a vanilla jQuery listener

  @function upListenerToJqueryListener
  @internal
  ###
  upListenerToJqueryListener = (upListener) ->
    (event) ->
      $me = event.$element || $(this)
      upListener.apply($me.get(0), [event, $me, up.syntax.data($me)])

  ###**
  Converts an argument list for `up.on()` to an argument list for `jQuery.on`.
  This involves rewriting the listener signature in the last argument slot.

  @function upDescriptionToJqueryDescription
  @internal
  ###
  upDescriptionToJqueryDescription = (upDescription, isNew) ->
    jqueryDescription = u.copy(upDescription)

    # Prefer to rename events in the copied jQuery description instead of
    # changing the original up description.
    fixRenamedEvents(jqueryDescription)

    # We remove the listener function from the end of the description.
    # We will re-push it to the description at the end.
    upListener = jqueryDescription.pop()
    jqueryListener = undefined
    if isNew
      jqueryListener = upListenerToJqueryListener(upListener)
      upListener._asJqueryListener = jqueryListener
      upListener._descriptionNumber = ++nextUpDescriptionNumber
    else
      jqueryListener = upListener._asJqueryListener
      jqueryListener or up.fail('up.off(): The callback %o was never registered through up.on()', upListener)
    jqueryDescription.push(jqueryListener)
    jqueryDescription

  fixRenamedEvents = (description) ->
    events = u.splitValues(description[0])
    events = u.map events, (event) ->
      if newEvent = renamedEvents[event]
        up.log.warn("Deprecated: #{event} has been renamed to #{newEvent}")
        newEvent
      else
        event
    description[0] = events.join(' ')

  ###**
  Listens to an event on `document`.

  The given event listener which will be executed whenever the
  given event is [triggered](/up.emit) on the given selector:

      up.on('click', '.button', function(event, $element) {
        console.log("Someone clicked the button %o", $element);
      });

  This is roughly equivalent to binding an event listener to `document`:

      $(document).on('click', '.button', function(event) {
        console.log("Someone clicked the button %o", $(this));
      });

  Other than jQuery, Unpoly will silently discard event listeners
  on [unsupported browsers](/up.browser.isSupported).

  \#\#\# Attaching structured data

  In case you want to attach structured data to the event you're observing,
  you can serialize the data to JSON and put it into an `[up-data]` attribute:

      <span class='person' up-data='{ "age": 18, "name": "Bob" }'>Bob</span>
      <span class='person' up-data='{ "age": 22, "name": "Jim" }'>Jim</span>

  The JSON will parsed and handed to your event handler as a third argument:

      up.on('click', '.person', function(event, $element, data) {
        console.log("This is %o who is %o years old", data.name, data.age);
      });

  \#\#\# Unbinding an event listener

  `up.on()` returns a function that unbinds the event listeners when called:

      // Define the listener
      var listener =  function() { ... };

      // Binding the listener returns an unbind function
      unbind = up.on('click', listener);

      // Unbind the listener
      unbind()

  There is also a function [`up.off()`](/up.off) which you can use for the same purpose:

      // Define the listener
      var listener =  function() { ... };

      // Bind the listener
      up.on('click', listener);

      // Unbind the listener
      up.off('click', listener)

  \#\#\# Migrating jQuery event handlers to `up.on()`

  Within the event handler, Unpoly will bind `this` to the
  native DOM element to help you migrate your existing jQuery code to
  this new syntax.

  So if you had this before:

      $(document).on('click', '.button', function() {
        $(this).something();
      });

  ... you can simply copy the event handler to `up.on()`:

      up.on('click', '.button', function() {
        $(this).something();
      });

  @function up.on
  @param {string} events
    A space-separated list of event names to bind.
  @param {string} [selector]
    The selector of an element on which the event must be triggered.
    Omit the selector to listen to all events with that name, regardless
    of the event target.
  @param {Function(event, $element, data)} behavior
    The handler that should be called.
    The function takes the affected element as the first argument (as a jQuery object).
    If the element has an [`up-data`](/up-data) attribute, its value is parsed as JSON
    and passed as a second argument.
  @return {Function}
    A function that unbinds the event listeners when called.
  @stable
  ###
  live = (upDescription...) ->
    # Silently discard any event handlers that are registered on unsupported
    # browsers and return a no-op destructor
    return (->) unless up.browser.isSupported()

    # Convert the args for up.on to an argument list as expected by jQuery.on.
    jqueryDescription = upDescriptionToJqueryDescription(upDescription, true)

    # Remember the descriptions we registered, so we can
    # clean up after ourselves during a `reset`
    rememberUpDescription(upDescription)

    $(document).on(jqueryDescription...)

    # Return destructor
    -> unbind(upDescription...)

  ###**
  Unbinds an event listener previously bound with [`up.on()`](/up.on).

  \#\#\# Example

  Let's say you are listing to clicks on `.button` elements:

      var listener = function() { ... };
      up.on('click', '.button', listener);

  You can stop listening to these events like this:

      up.off('click', '.button', listener);

  Note that you need to pass `up.off()` a reference to the same listener function
  that was passed to `up.on()` earlier.

  @function up.off
  @stable
  ###
  unbind = (upDescription...) ->
    jqueryDescription = upDescriptionToJqueryDescription(upDescription, false)
    forgetUpDescription(upDescription)
    $(document).off(jqueryDescription...)

  rememberUpDescription = (upDescription) ->
    number = upDescriptionNumber(upDescription)
    liveUpDescriptions[number] = upDescription

  forgetUpDescription = (upDescription) ->
    number = upDescriptionNumber(upDescription)
    delete liveUpDescriptions[number]

  upDescriptionNumber = (upDescription) ->
    u.last(upDescription)._descriptionNumber

  ###**
  Emits a event with the given name and properties.

  The event will be triggered as a jQuery event on `document`.

  Other code can subscribe to events with that name using
  [`up.on()`](/up.on) or by [binding a jQuery event listener](http://api.jquery.com/on/) to `document`.

  \#\#\# Example

      up.on('my:event', function(event) {
        console.log(event.foo);
      });

      up.emit('my:event', { foo: 'bar' });
      # Prints "bar" to the console

  @function up.emit
  @param {string} eventName
    The name of the event.
  @param {Object} [eventProps={}]
    A list of properties to become part of the event object
    that will be passed to listeners. Note that the event object
    will by default include properties like `preventDefault()`
    or `stopPropagation()`.
  @param {jQuery} [eventProps.$element=$(document)]
    The element on which the event is triggered.
  @param {string|Array} [eventProps.message]
    A message to print to the console when the event is emitted.
    If omitted, a default message is printed.
    Set this to `false` to prevent any console output.
  @experimental
  ###
  emit = (eventName, eventProps = {}) ->
    event = $.Event(eventName, eventProps)
    # Three cases:
    # - Event is triggered on document (default)
    # - Event is triggered on { $element }
    # - Event is triggered on { $target }, but should have an { $element } property
    $target = eventProps.$target || eventProps.$element || $(document)
    logEmission(eventName, eventProps)
    $target.trigger(event)
    event

  logEmission = (eventName, eventProps) ->
    if eventProps.hasOwnProperty('message')
      niceMessage = eventProps.message
      delete eventProps.message
      if niceMessage != false
        if u.isArray(niceMessage)
          [niceMessage, niceMessageArgs...] = niceMessage
        else
          niceMessageArgs = []
        if niceMessage
          if u.isPresent(eventProps)
            up.puts "#{niceMessage} (%s (%o))", niceMessageArgs..., eventName, eventProps
          else
            up.puts "#{niceMessage} (%s)", niceMessageArgs..., eventName
    else
      if u.isPresent(eventProps)
        up.puts 'Emitted event %s (%o)', eventName, eventProps
      else
        up.puts 'Emitted event %s', eventName

  ###**
  [Emits an event](/up.emit) and returns whether no listener
  has prevented the default action.

  @function up.bus.nobodyPrevents
  @param {string} eventName
  @param {Object} eventProps
  @param {string|Array} [eventProps.message]
  @return {boolean}
    whether no listener has prevented the default action
  @experimental
  ###
  nobodyPrevents = (args...) ->
    event = emit(args...)
    not event.isDefaultPrevented()

  ###**
  [Emits](/up.emit) the given event and returns a promise
  that will be fulfilled if no listener has prevented the default action.

  If any listener prevented the default listener
  the returned promise will never be resolved.

  @function up.bus.whenEmitted
  @param {string} eventName
  @param {Object} eventProps
  @param {string|Array} [eventProps.message]
  @return {Promise}
  @internal
  ###
  whenEmitted = (args...) ->
    new Promise (resolve, reject) ->
      if nobodyPrevents(args...)
        resolve()
      else
        reject(new Error("Event #{args[0]} was prevented"))

  ###**
  Registers an event listener to be called when the user
  presses the `Escape` key.

  @function up.bus.onEscape
  @param {Function} listener
    The listener function to register.
  @return {Function}
    A function that unbinds the event listeners when called.
  @experimental
  ###
  onEscape = (listener) ->
    live('keydown', 'body', (event) ->
      if u.escapePressed(event)
        listener(event)
    )

  ###**
  Stops the given event from propagating and prevents the default action.

  @function up.bus.haltEvent
  @internal
  ###
  haltEvent = (event) ->
    event.stopImmediatePropagation()
    event.stopPropagation()
    event.preventDefault()

  ###**
  @function up.bus.consumeAction
  @internal
  ###
  consumeAction = (event) ->
    # Halt the event chain to stop duplicate processing of this user interaction.
    haltEvent(event)
    unless event.type == 'up:action:consumed'
      # Although we have consumed this action and halted the event chain,
      # other components might still need to react. E.g. a popup needs to close when
      # an outside link consumes the user click. So we emit another event for that.
      emit('up:action:consumed', $element: $(event.target), message: false)

  ###**
  Makes a snapshot of the currently registered event listeners,
  to later be restored through [`up.bus.reset()`](/up.bus.reset).

  @internal
  ###
  snapshot = ->
    for number, description of liveUpDescriptions
      description.isDefault = true

  resetBus = ->
    # Resets the list of registered event listeners to the
    # moment when the framework was booted.

    # Copy a list of the descriptions we're going to unbind and iterate over
    # them a second time below. This way we avoid manipulate the object we're
    # iterating over.
    doomedDescriptions = []
    for number, description of liveUpDescriptions
      doomedDescriptions.push(description) unless description.isDefault

    for description in doomedDescriptions
      unbind(description...)

  ###**
  Resets Unpoly to the state when it was booted.
  All custom event handlers, animations, etc. that have been registered
  will be discarded.

  This is an internal method for to enable unit testing.
  Don't use this in production.

  Emits event [`up:framework:reset`](/up:framework:reset).

  @function up.reset
  @experimental
  ###
  emitReset = ->
    emit('up:framework:reset', message: 'Resetting framework')
    # Unfortunately we cannot reset up.protocol via event
    # without introducing cycles in the asset load order
    up.protocol.reset()

  ###**
  This event is [emitted](/up.emit) when Unpoly is [reset](/up.reset) during unit tests.

  @event up:framework:reset
  @experimental
  ###

  deprecateRenamedEvent = (oldEvent, newEvent) ->
    renamedEvents[oldEvent] = newEvent

  ###**
  Boots the Unpoly framework.

  **This is called automatically** by including the Unpoly JavaScript files.

  Unpoly will not boot if the current browser is [not supported](/up.browser.isSupported).
  This leaves you with a classic server-side application on legacy browsers.

  @function up.boot
  @internal
  ###
  boot = ->
    if up.browser.isSupported()
      emit('up:framework:boot', message: 'Booting framework')
      # Unpoly modules now snapshot themselves to suppot reset()
      emit('up:framework:booted', message: 'Framework booted')
      u.nextFrame ->
        # At this point all user-provided compilers have been registered.
        u.whenReady().then ->
          # The following event will cause Unpoly to compile the <body>
          emit('up:app:boot', message: 'Booting user application')
          emit('up:app:booted', message: 'User application booted')
    else
      console.log?("Unpoly doesn't support this browser. Framework was not booted.")

  ###**
  This event is [emitted](/up.emit) when Unpoly [starts to boot](/up.boot).

  @event up:framework:boot
  @internal
  ###

  live 'up:framework:booted', snapshot
  live 'up:framework:reset', resetBus

  <% if ENV['JS_KNIFE'] %>knife: eval(Knife.point)<% end %>
  on: live # can't name symbols `on` in Coffeescript
  off: unbind # can't name symbols `off` in Coffeescript
  emit: emit
  nobodyPrevents: nobodyPrevents
  whenEmitted: whenEmitted
  onEscape: onEscape
  emitReset: emitReset
  haltEvent: haltEvent
  consumeAction: consumeAction
  deprecateRenamedEvent: deprecateRenamedEvent
  boot: boot

)(jQuery)

up.on = up.bus.on
up.off = up.bus.off
up.emit = up.bus.emit
up.reset = up.bus.emitReset
up.boot = up.bus.boot
