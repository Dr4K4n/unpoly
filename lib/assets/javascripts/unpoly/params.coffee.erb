###**
Request parameters
==================

Methods like [`up.request()`](/up.request) or [`up.replace()`](/up.replace) accept a `{ params }` option
to with request parameters.

This module offers a consistent API to read and manipulate request parameters independent of their type.
The following types of parameters are supported:

1. an object like `{ email: 'foo@bar.com' }`
2. a [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object
3. a query string like `email=foo%40bar.com`
4. an array of `{ name, value }` objects like `[{ name: 'email', value: 'foo@bar.com' }]`

@class up.params
###
up.params = (($) ->
  u = up.util

  NATURE_MISSING = 0
  NATURE_ARRAY = 1
  NATURE_QUERY = 2
  NATURE_FORM_DATA = 3
  NATURE_OBJECT = 4

  natureOf = (params) ->
    if u.isMissing(params)
      NATURE_MISSING
    else if u.isArray(params)
      NATURE_ARRAY
    else if u.isString(params)
      NATURE_QUERY
    else if u.isFormData(params)
      NATURE_FORM_DATA
    else if u.isObject(params)
      NATURE_OBJECT
    else
      up.fail("Unsupport params type: %o", params)

  ###**
  Returns an array representation of the given `params`.

  The given params value may be of any [supported type](/up.params).

  Each element in the returned array is an object with `{ name }` and `{ value }` properties.

  \#\#\# Example

      var array = up.params.toArray('foo=bar&baz=bam')

      // array is now: [
      //   { name: 'foo', value: 'bar' },
      //   { name: 'baz', value: 'bam' },
      // ]

  @function up.params.toArray
  @param {Object|FormData|string|Array|undefined} params
    the params to convert
  @return {Array}
    an array representation of the given params
  @experimental
  ###
  toArray = (params) ->
    switch natureOf(params)
      when NATURE_MISSING
        []
      when NATURE_ARRAY
        params
      when NATURE_QUERY
        buildArrayFromQuery(params)
      when NATURE_FORM_DATA
        buildArrayFromFormData(params)
      when NATURE_OBJECT
        buildArrayFromObject(params)

  ###**
  Returns an object representation of the given `params`.

  The given params value may be of any [supported type](/up.params).

  The returned value is a simple JavaScript object whose properties correspond
  to the key/values in the given `params`.

  \#\#\# Example

      var object = up.params.toObject('foo=bar&baz=bam')

      // object is now: {
      //   foo: 'bar',
      //   baz: 'bam'
      // ]

  @function up.params.toObject
  @param {Object|FormData|string|Array|undefined} params
    the params to convert
  @return {Array}
    an object representation of the given params
  @experimental
  ###
  toObject = (params) ->
    switch natureOf(params)
      when NATURE_MISSING
        {}
      when NATURE_ARRAY, NATURE_QUERY, NATURE_FORM_DATA
        buildObjectFromArray(toArray(params))
      when NATURE_OBJECT
        params

  ###**
  Returns [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) representation of the given `params`.

  The given params value may be of any [supported type](/up.params).

  \#\#\# Example

      var formData = up.params.toFormData('foo=bar&baz=bam')

      formData.get('foo') // 'bar'
      formData.get('baz') // 'bam'

  @function up.params.toFormData
  @param {Object|FormData|string|Array|undefined} params
    the params to convert
  @return {FormData}
    a [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) representation of the given params
  @experimental
  ###
  toFormData = (params) ->
    switch natureOf(params)
      when NATURE_MISSING
        # Return an empty FormData object
        new FormData()
      when NATURE_ARRAY, NATURE_QUERY, NATURE_OBJECT
        buildFormDataFromArray(toArray(params))
      when NATURE_FORM_DATA
        params

  ###**
  Returns an query string for the given `params`.

  The given params value may be of any [supported type](/up.params).

  The keys and values in the returned query string will be [percent-encoded](https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding).
  Non-primitive values (like [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File) will be omitted from
  the retuned query string.

  \#\#\# Example

      var query = up.params.toQuery({ foo: 'bar', baz: 'bam' })

      // query is now: 'foo=bar&baz=bam'

  @function up.params.toQuery
  @param {Object|FormData|string|Array|undefined} params
    the params to convert
  @return {string}
    a query string built from the given params
  @experimental
  ###
  toQuery = (params) ->
    switch natureOf(params)
      when NATURE_MISSING
        ''
      when NATURE_QUERY
        params
      when NATURE_ARRAY, NATURE_FORM_DATA, NATURE_OBJECT
        buildQueryFromArray(toArray(params))

  arrayEntryToQuery = (entry) ->
    value = entry.value
    return undefined unless isPrimitiveValue(value)
    query = encodeURIComponent(entry.name)
    # There is a subtle difference when encoding blank values:
    # 1. An undefined or null value is encoded to `key` with no equals sign
    # 2. An empty string value is encoded to `key=` with an equals sign but no value
    if u.isGiven(value)
      query += "="
      query += encodeURIComponent(value)
    query

  ###**
  Returns whether the given value can be encoded into a query string.

  We will have `File` values in our params when we serialize a form with a file input.
  These entries will be filtered out when converting to a query string.
  ###
  isPrimitiveValue = (value) ->
    u.isMissing(value) || u.isString(value) || u.isNumber(value) || u.isBoolean(value)

  safeSet = (obj, k, value) ->
    obj[k] = value  unless u.isBasicObjectProperty(k)

  safeGet = (obj, k) ->
    obj[k] unless u.isBasicObjectProperty(k)

  buildQueryFromArray = (array) ->
    parts = u.map(array, arrayEntryToQuery)
    parts = u.compact(parts)
    parts.join('&')

  buildArrayFromQuery = (query) ->
    array = []
    for part in query.split('&')
      if part
        [name, value] = part.split('=')
        name = decodeURIComponent(name)
        # There are three forms we need to handle:
        # (1) foo=bar should become { name: 'foo', bar: 'bar' }
        # (2) foo=    should become { name: 'foo', bar: '' }
        # (3) foo     should become { name: 'foo', bar: null }
        if u.isGiven(value)
          value = decodeURIComponent(value)
        else
          value = null
        array.push({ name, value })
    array

  buildArrayFromObject = (object) ->
    array = []
    for k, v of object
      array.push(name: k, value: v)
    array

  buildObjectFromArray = (array) ->
    obj = {}
    for entry in array
      safeSet(obj, entry.name, entry.value)
    obj

  buildArrayFromFormData = (formData) ->
    array = []
    u.eachIterator formData.entries(), (value) ->
      [name, value] = value
      array.push({ name, value })
    array

  buildFormDataFromArray = (array) ->
    formData = new FormData()
    for entry in array
      formData.append(entry.name, entry.value)
    <% if ENV['JS_KNIFE'] %>formData.originalArray = array<% end %>
    formData

  buildURL = (base, params) ->
    parts = [base, toQuery(params)]
    parts = u.select(parts, u.isPresent)
    separator = if u.contains(base, '?') then '&' else '?'
    parts.join(separator)

  ###**
  Adds to the given `params` a new  entry with the given `name` and `value`.

  The given params value may be of any [supported type](/up.params).

  The given `params` value is changed in-place, if possible. Some types, such as query strings,
  cannot be changed in-place. The return value is always a params value that includes the new entry.

  \#\#\# Example

      var obj = { foo: 'bar' }
      up.params.add(obj, 'baz', 'bam')
      // obj is now: { foo: 'bar', baz: 'bam' }

  @function up.params.add
  @param {string|object|FormData|Array|undefined} params
  @param {string} name
  @param {any} value
  @return {string|object|FormData|Array}
  @experimental
  ###
  add = (params, name, value) ->
    newEntry = [{ name, value }]
    assign(params, newEntry)

  ###**
  Returns a new params value that contains entries from both `params` and `otherParams`.

  The given params value may be of any [supported type](/up.params).

  This function creates a new params value. The given `params` argument is not changed.

  @function up.params.merge
  @param {string|object|FormData|Array|undefined} params
  @param {string|object|FormData|Array|undefined} otherParams
  @return {string|object|FormData|Array}
  @experimental
  ###
  merge = (params, otherParams) ->
    switch natureOf(params)
      when NATURE_MISSING
        merge({}, otherParams)
      when NATURE_ARRAY
        otherArray = toArray(otherParams)
        params.concat(otherArray)
      when NATURE_FORM_DATA
        formData = new FormData()
        assign(formData, params)
        assign(formData, otherParams)
        formData
      when NATURE_QUERY
        otherQuery = toQuery(otherParams)
        parts = u.select([params, otherQuery], u.isPresent)
        parts.join('&')
      when NATURE_OBJECT
        u.merge(params, toObject(otherParams))

  ###**
  Returns the first param value with the given `name` from the given `params`.

  The given params value may be of any [supported type](/up.params).

  \#\#\# Example

      var array = [
        { name: 'foo', value: 'bar' },
        { name: 'baz', value: 'bam' }
      }

      value = up.params.get(array, 'baz')
      // value is now: 'bam'

  @function up.params.get
  @experimental
  ###
  get = (params, name) ->
    switch natureOf(params)
      when NATURE_MISSING
        undefined
      when NATURE_ARRAY
        entry = u.detect(params, (entry) -> entry.name == name)
        entry?.value
      when NATURE_FORM_DATA
        value = params.get(name)
        value = undefined if u.isNull(value)
        value
      when NATURE_QUERY
        safeGet(toObject(params), name)
      when NATURE_OBJECT
        safeGet(params, name)

  ###**
  Extends the given `params` with entries from the given `otherParams`.

  The given params value may be of any [supported type](/up.params).

  The given `params` is changed in-place, if possible. Some types, such as query strings,
  cannot be changed in-place. The return value is always a params value that includes the new entries.

  @function up.params.assign
  @param {string|object|FormData|Array|undefined} params
  @param {string|object|FormData|Array|undefined} otherParams
  @return {string|object|FormData|Array}
  @experimental
  ###
  assign = (params, otherParams) ->
    switch natureOf(params)
      when NATURE_ARRAY
        otherArray = toArray(otherParams)
        params.push(otherArray...)
        params
      when NATURE_FORM_DATA
        otherArray = toArray(otherParams)
        for entry in otherArray
          params.append(entry.name, entry.value)
        params
      when NATURE_OBJECT
        u.assign(params, toObject(otherParams))
      when NATURE_QUERY, NATURE_MISSING
        # Strings and undefined are immutable, so we merge instead.
        merge(params, otherParams)

  submittingButton = (form) ->
    $form = $(form)
    submitButtonSelector = up.form.submitButtonSelector()
    $activeElement = $(document.activeElement)
    if $activeElement.is(submitButtonSelector) && $form.has($activeElement)
      $activeElement[0]
    else
      # If no button is focused, we assume the first button in the form.
      $form.find(submitButtonSelector)[0]

  ###**
  Serializes request params from the given `<form>`.

  The returned params may be passed as `{ params }` option to
  [`up.request()`](/up.request) or [`up.replace()`](/up.replace).

  The serialized params will include the form's submit button, if that
  button as a `name` attribute.

  \#\#\#\# Example

  Given this HTML form:

      <form>
        <input type="text" name="name" value="Foo Bar">
        <input type="text" name="email" value="foo@bar.com">
      </form>

  This would serialize the form into an array representation:

      var params = up.params.fromForm('input[name=email]')

      // params is now: [
      //   { name: 'name', value: 'Foo Bar' },
      //   { name: 'email', value: 'foo@bar.com' }
      // ]

  @function up.params.fromForm
  @param {Element|jQuery|string} form
  @return {Array}
  @experimental
  ###
  fromForm = (form) ->
    if form = u.element(form)
      fields = form.querySelectorAll(up.form.fieldSelector())
      if button = submittingButton(form)
        fields = u.toArray(fields)
        fields.push(button)
      return u.flatMap(fields, fromField)

  ###**
  Serializes request params from a single [input field](/up.form.config#config.fields).
  To serialize an entire form, use [`up.params.fromForm()`](/up.params.fromForm).

  Note that some fields may produce multiple params, such as `<select multiple>`.

  \#\#\#\# Example

  Given this HTML form:

      <form>
        <input type="text" name="email" value="foo@bar.com">
        <input type="password" name="password">
      </form>

  This would retrieve request parameters from the `email` field:

      var params = up.params.fromField('input[name=email]')

      // params is now: [{ name: 'email', value: 'foo@bar.com' }]

  @function up.params.fromField
  @param {Element|jQuery|string} form
  @return {Array}
    an array of `{ name, value }` objects
  @experimental
  ###
  fromField = (field) ->
    params = []
    if (field = u.element(field)) && (name = field.name) && (!field.disabled)
      tagName = field.tagName
      type = field.type
      if tagName == 'SELECT'
        for option in field.querySelectorAll('option')
          if option.selected
            params.push
             name: name
             value: option.value
      else if type == 'checkbox' || type == 'radio'
        if field.checked
          params.push
            name: name
            value: field.value
      else if type == 'file'
        # The value of an input[type=file] is the local path displayed in the form.
        # The actual File objects are in the #files property.
        for file in field.files
          params.push
            name: name
            value: file
      else
        params.push
          name: name
          value: field.value
    params

  ###**
  Returns the [query string](https://en.wikipedia.org/wiki/Query_string) from the given URL.

  The query string is returned **without** a leading question mark (`?`).
  Returns `undefined` if the given URL has no query component.

  You can access individual values from the returned query string using functions like
  [`up.params.get()`](/up.params.get) or [`up.params.toObject()`](/up.params.toObject).

  \#\#\# Example

      var query = up.params.fromURL('http://foo.com?bar=baz')

      // query is now: 'bar=baz'

  @function up.params.fromURL
  @param {string} url
    The URL from which to extract the query string.
  @return {string|undefined}
    The given URL's query string, or `undefined` if the URL has no query component.
  @experimental
  ###
  fromURL = (url) ->
    urlParts = u.parseUrl(url)
    if query = urlParts.search
      query = query.replace(/^\?/, '')
      query

  toArray: toArray
  toObject: toObject
  toQuery: toQuery
  toFormData: toFormData
  buildURL: buildURL
  get: get
  add: add
  assign: assign
  merge: merge
  fromForm: fromForm
  fromURL: fromURL

)(jQuery)
